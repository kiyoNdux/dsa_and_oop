/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.petadoption;

/**
 *
 * @author PC
 */

import com.petadoption.Pet;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class PetAdoptationSystem extends javax.swing.JFrame {

    /**
     * Creates new form PetAdoptationSystem
     */
    
    private ArrayList<Pet> petList = new ArrayList<>();
    private ArrayList<AdoptionRecord> adoptionRecords = new ArrayList<>();
    // table models (petTableModel and adoptionTableModel defined later)
    
    private void populatePetDropdown() {
        petNameComboBoxAR.removeAllItems(); // clear old items

        for (Pet pet : petList) {
            // Only include available pets
            if (pet.getStatus().equalsIgnoreCase("Available")) {
                petNameComboBoxAR.addItem(pet.getName());
            }
        }

        if (petNameComboBoxAR.getItemCount() > 0) {
            petNameComboBoxAR.setSelectedIndex(0);  // select first pet
        }
    }



    
    
    public PetAdoptationSystem() {

         setLookAndFeel();          // separate method for Nimbus
         initComponents();          // NetBeans autogenerated UI
         customizeUI();             // fonts, colors, table row heights
         initTableModels();         // initialize DefaultTableModels
         initDropdowns();           // populate combo boxes 
         displayPets();             // fill jTable1 with petList data
         attachTableListeners();    // click listener for jTable1
         setHelpText();             // fill About/Help tab
         
        // Models and components already configured in initComponents() and initTableModels().
        // Ensure pet dropdown is populated with current petList state.
        populatePetDropdown();
     }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        editButton = new javax.swing.JButton();
        petNameLabel = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        ageLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        petNameTextField = new javax.swing.JTextField();
        typeTextField = new javax.swing.JTextField();
        ageTextField = new javax.swing.JTextField();
        statusLabel = new javax.swing.JLabel();
        statusComboBox = new javax.swing.JComboBox<>();
        managePetsTable = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        petNameLabelAR = new javax.swing.JLabel();
        petNameComboBoxAR = new javax.swing.JComboBox<>();
        adoptorNameAR = new javax.swing.JLabel();
        adopterNameTextFieldAR = new javax.swing.JTextField();
        contactInfoLabelAR = new javax.swing.JLabel();
        contactInfoTextFieldAR = new javax.swing.JTextField();
        adoptionDateLabelAR = new javax.swing.JLabel();
        adoptionDateTextFieldAR = new javax.swing.JTextField();
        notesLabelAR = new javax.swing.JLabel();
        notesTextFieldAR = new javax.swing.JTextField();
        deleteRecordButtonAR = new javax.swing.JButton();
        addRecordButtonAR = new javax.swing.JButton();
        clearFieldsButtonAR = new javax.swing.JButton();
        adoptionRecordsTable = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        petNameLabel.setText("Pet Name");

        typeLabel.setText("Type");

        ageLabel.setText("Age");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        petNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petNameTextFieldActionPerformed(evt);
            }
        });

        typeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeTextFieldActionPerformed(evt);
            }
        });

        ageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageTextFieldActionPerformed(evt);
            }
        });

        statusLabel.setText("Status");

        statusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        statusComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusComboBoxActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type", "Age", "Status"
            }
        ));
        managePetsTable.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusLabel)
                    .addComponent(ageLabel)
                    .addComponent(typeLabel)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(statusComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 225, Short.MAX_VALUE)
                        .addComponent(ageTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(typeTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(petNameTextField, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(petNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(managePetsTable, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addButton)
                .addGap(18, 18, 18)
                .addComponent(editButton)
                .addGap(18, 18, 18)
                .addComponent(deleteButton)
                .addGap(18, 18, 18)
                .addComponent(clearButton)
                .addGap(186, 186, 186))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(petNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(petNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(typeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(271, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(managePetsTable)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(editButton)
                    .addComponent(deleteButton)
                    .addComponent(clearButton))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Manage Pets", jPanel1);

        petNameLabelAR.setText("Pet Name");

        petNameComboBoxAR.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        petNameComboBoxAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                petNameComboBoxARActionPerformed(evt);
            }
        });

        adoptorNameAR.setText("Adopter Name");

        adopterNameTextFieldAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adopterNameTextFieldARActionPerformed(evt);
            }
        });

        contactInfoLabelAR.setText("Contact Info");

        contactInfoTextFieldAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactInfoTextFieldARActionPerformed(evt);
            }
        });

        adoptionDateLabelAR.setText("Adoption Date");

        adoptionDateTextFieldAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adoptionDateTextFieldARActionPerformed(evt);
            }
        });

        notesLabelAR.setText("Notes");

        notesTextFieldAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notesTextFieldARActionPerformed(evt);
            }
        });

        deleteRecordButtonAR.setText("Delete Record");
        deleteRecordButtonAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRecordButtonARActionPerformed(evt);
            }
        });

        addRecordButtonAR.setText("Add Record");
        addRecordButtonAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRecordButtonARActionPerformed(evt);
            }
        });

        clearFieldsButtonAR.setText("Clear Fields");
        clearFieldsButtonAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldsButtonARActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pet Name", "Adopter Name", "Contact Info", "Adoptation Date", "Notes"
            }
        ));
        adoptionRecordsTable.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(petNameLabelAR)
                    .addComponent(adoptorNameAR)
                    .addComponent(contactInfoLabelAR)
                    .addComponent(adoptionDateLabelAR)
                    .addComponent(notesLabelAR)
                    .addComponent(petNameComboBoxAR, 0, 225, Short.MAX_VALUE)
                    .addComponent(adopterNameTextFieldAR)
                    .addComponent(contactInfoTextFieldAR)
                    .addComponent(adoptionDateTextFieldAR)
                    .addComponent(notesTextFieldAR))
                .addGap(18, 18, 18)
                .addComponent(adoptionRecordsTable, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addRecordButtonAR)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteRecordButtonAR)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clearFieldsButtonAR)
                .addGap(176, 176, 176))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(petNameLabelAR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(petNameComboBoxAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(adoptorNameAR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adopterNameTextFieldAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contactInfoLabelAR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contactInfoTextFieldAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(adoptionDateLabelAR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adoptionDateTextFieldAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(notesLabelAR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(notesTextFieldAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 180, Short.MAX_VALUE))
                    .addComponent(adoptionRecordsTable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addRecordButtonAR)
                    .addComponent(deleteRecordButtonAR)
                    .addComponent(clearFieldsButtonAR))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Adoption Records", jPanel2);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 878, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("About / Help", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 878, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Clear Fields Button
    private void clearFieldsButtonARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFieldsButtonARActionPerformed
        // TODO add your handling code here:
        clearAdoptionForm();
    }//GEN-LAST:event_clearFieldsButtonARActionPerformed

    // Delete Record Button
    private void deleteRecordButtonARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRecordButtonARActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable2.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a record to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this record?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            adoptionRecords.remove(selectedRow);
            displayAdoptionRecords();
            JOptionPane.showMessageDialog(this, "Record deleted successfully.");
        }
    }//GEN-LAST:event_deleteRecordButtonARActionPerformed

    // Add Record Button
    private void addRecordButtonARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRecordButtonARActionPerformed
        // TODO add your handling code here:
        String adopterName = adopterNameTextFieldAR.getText().trim();
        String contactInfo = contactInfoTextFieldAR.getText().trim();
        String adoptionDate = adoptionDateTextFieldAR.getText().trim();
        String petName = (String) petNameComboBoxAR.getSelectedItem();
        String notes = notesTextFieldAR.getText().trim();

        // Input validation
        if (adopterName.isEmpty() || contactInfo.isEmpty() || adoptionDate.isEmpty() || petName == null) {
            JOptionPane.showMessageDialog(this, "Please fill in all required fields.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if selected pet is still available
        Pet selectedPet = null;
        for (Pet pet : petList) {
            if (pet.getName().equals(petName)) {
                selectedPet = pet;
                break;
            }
        }

        if (selectedPet == null) {
            JOptionPane.showMessageDialog(this, "Selected pet not found!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (selectedPet.isAdopted()) {
            JOptionPane.showMessageDialog(this, "This pet has already been adopted!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Mark pet as adopted
        selectedPet.setAdopted(true);
        selectedPet.setStatus("Adopted");

        // Create and store adoption record
        AdoptionRecord record = new AdoptionRecord(adopterName, contactInfo, adoptionDate, petName, notes);
        adoptionRecords.add(record);

        JOptionPane.showMessageDialog(this, "Adoption record added successfully!");

        // Refresh UI elements
        displayAdoptionRecords();
        displayPets();           // Update pet table to show new status
        populatePetDropdown();   // Remove adopted pet from dropdown
        clearAdoptionForm();
    }//GEN-LAST:event_addRecordButtonARActionPerformed

    // Notes
    private void notesTextFieldARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notesTextFieldARActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_notesTextFieldARActionPerformed

    // Adoption Date
    private void adoptionDateTextFieldARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adoptionDateTextFieldARActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adoptionDateTextFieldARActionPerformed

    // Contact Info
    private void contactInfoTextFieldARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactInfoTextFieldARActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contactInfoTextFieldARActionPerformed

    // Adopter Name
    private void adopterNameTextFieldARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adopterNameTextFieldARActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adopterNameTextFieldARActionPerformed

    // Pet Name Dropdown
    private void petNameComboBoxARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petNameComboBoxARActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petNameComboBoxARActionPerformed

    private void statusComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusComboBoxActionPerformed

    private void ageTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }                                           

    private void typeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeTextFieldActionPerformed

    private void petNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_petNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_petNameTextFieldActionPerformed

    // Clear Button
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // Clear all pets from the list and table
        petList.clear();
        if (petTableModel != null) {
            petTableModel.setRowCount(0);
        }

        // Remove all items from the Pet Name dropdown in Adoption Records
        petNameComboBoxAR.removeAllItems();

        // Clear input fields
        petNameTextField.setText("");
        typeTextField.setText("");
        ageTextField.setText("");
        statusComboBox.setSelectedIndex(0);
        jTable1.clearSelection();

        JOptionPane.showMessageDialog(this, "All pets and input fields cleared.");
    }

    // Delete Button
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = getSelectedRowIndex();
        if (selectedRow == -1) return;

        petList.remove(selectedRow);
        JOptionPane.showMessageDialog(this, "Pet deleted successfully!");
        displayPets();
        populatePetDropdown();
    }//GEN-LAST:event_deleteButtonActionPerformed

    // Add Button
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
            // TODO add your handling code here:
        try {
            String name = petNameTextField.getText().trim();
            String type = typeTextField.getText().trim();
            String status = (String) statusComboBox.getSelectedItem();
            int age = Integer.parseInt(ageTextField.getText().trim());

            // Input validation
            if (name.isEmpty() || type.isEmpty() || status.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill all fields!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (age < 0 || age > 30) {
                JOptionPane.showMessageDialog(this, "Age must be between 0 and 30!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Capitalize first letter of name/type
            name = name.substring(0, 1).toUpperCase() + name.substring(1).toLowerCase();
            type = type.substring(0, 1).toUpperCase() + type.substring(1).toLowerCase();

            // Create new Pet based on type
            Pet pet;
            if (type.equalsIgnoreCase("Dog")) {
                pet = new Dog(name, age);
            } else if (type.equalsIgnoreCase("Cat")) {
                pet = new Cat(name, age);
            } else {
                pet = new Pet(name, type, age);
            }

            pet.setStatus(status);
            pet.setAdopted(false);

            petList.add(pet);
            JOptionPane.showMessageDialog(this, "Pet added successfully!");
            displayPets();
            clearFields();
            populatePetDropdown();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Age must be a number!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    // Edit Button
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int selectedRow = getSelectedRowIndex();
        if (selectedRow == -1) return; // no row selected

        try {
            String name = petNameTextField.getText().trim();
            String type = typeTextField.getText().trim();
            String status = (String) statusComboBox.getSelectedItem();
            int age = Integer.parseInt(ageTextField.getText().trim());

            if (name.isEmpty() || type.isEmpty() || status.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill all fields!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (age < 0 || age > 30) {
                JOptionPane.showMessageDialog(this, "Age must be between 0 and 30!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Capitalize first letter
            name = name.substring(0, 1).toUpperCase() + name.substring(1).toLowerCase();
            type = type.substring(0, 1).toUpperCase() + type.substring(1).toLowerCase();

            Pet pet = petList.get(selectedRow);
            pet.setName(name);
            pet.setType(type);
            pet.setAge(age);
            pet.setStatus(status);

            JOptionPane.showMessageDialog(this, "Pet updated successfully!");
            displayPets();
            clearFields();
            populatePetDropdown();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Age must be a number!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

//GEN-FIRST:event_jButton1ActionPerformed

//GEN-LAST:event_jButton1ActionPerformed

    // Helper Methods for Manage Pets
    
    private void displayPets() {
        // update pet table model
        if (petTableModel != null) {
            petTableModel.setRowCount(0);
            for (Pet p : petList) {
                petTableModel.addRow(new Object[]{p.getName(), p.getType(), p.getAge(), p.getStatus()});
            }
        }
    }
    
    private void clearFields() {
        petNameTextField.setText("");
        typeTextField.setText("");
        ageTextField.setText("");
        statusComboBox.setSelectedIndex(0);
    }
    
    private void initPetStatusDropdown() {
        statusComboBox.removeAllItems();
        statusComboBox.addItem("Available");
        statusComboBox.addItem("Pending");
        statusComboBox.addItem("Adopted");
        statusComboBox.setSelectedItem("Available");
    }

    
    
    // Helper Methods for Adoptation Records
    
    private void clearAdoptionForm() {
         adopterNameTextFieldAR.setText("");
         contactInfoTextFieldAR.setText("");
         adoptionDateTextFieldAR.setText("");
         notesTextFieldAR.setText("");
         petNameComboBoxAR.setSelectedIndex(-1);
     }
 
     private void displayAdoptionRecords() {
         if (adoptionTableModel != null) {
             adoptionTableModel.setRowCount(0);
             for (AdoptionRecord r : adoptionRecords) {
                 adoptionTableModel.addRow(new Object[] {
                     r.getAdopterName(),
                     r.getContactInfo(),
                     r.getAdoptionDate(),
                     r.getPetName(),
                     r.getNotes()
                 });
             }
         }
     }
 
     
    // Helper Method for Design
    
    private void setLookAndFeel() {
        try {
            javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (Exception ex) {
            System.err.println("Failed to set look and feel: " + ex);
        }
    }
    
    
    private void customizeUI() {
        java.awt.Font font = new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14);

        // Tables - use default background, but improve font and selection color
        jTable1.setFont(font); 
        jTable1.setRowHeight(22);
        jTable1.setForeground(java.awt.Color.DARK_GRAY);
        jTable1.setSelectionBackground(new java.awt.Color(220, 235, 245));
        jTable1.setSelectionForeground(java.awt.Color.BLACK);
        jTable1.getTableHeader().setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 14));

        jTable2.setFont(font); 
        jTable2.setRowHeight(22);
        jTable2.setForeground(java.awt.Color.DARK_GRAY);
        jTable2.setSelectionBackground(new java.awt.Color(220, 235, 245));
        jTable2.setSelectionForeground(java.awt.Color.BLACK);
        jTable2.getTableHeader().setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 14));

        // Buttons styling with colors
        styleButton(editButton, new java.awt.Color(33, 150, 243)); // Edit - Blue
        styleButton(addButton, new java.awt.Color(76, 175, 80)); // Add - Green
        styleButton(deleteButton, new java.awt.Color(244, 67, 54)); // Delete - Red
        styleButton(clearButton, new java.awt.Color(158, 158, 158)); // Clear - Gray
        styleButton(addRecordButtonAR, new java.awt.Color(76, 175, 80)); // Add Record - Green
        styleButton(deleteRecordButtonAR, new java.awt.Color(244, 67, 54)); // Delete Record - Red
        styleButton(clearFieldsButtonAR, new java.awt.Color(158, 158, 158)); // Clear Fields - Gray

        // Style all text fields and combo boxes
        styleAllFields();
    }

    private void styleButton(javax.swing.JButton button, java.awt.Color bgColor) {
        button.setBackground(bgColor);
        button.setForeground(java.awt.Color.WHITE);
        button.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
        button.setBorderPainted(false);
        button.setFocusPainted(false);
        button.setOpaque(true);

        // Add hover effect
        button.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            button.setBackground(bgColor.brighter());
        }
        public void mouseExited(java.awt.event.MouseEvent evt) {
            button.setBackground(bgColor);
        }
    });
    }

    private void styleAllFields() {
        // Labels - use regular font, not bold
        java.awt.Font labelFont = new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14);
        petNameLabel.setFont(labelFont);
        typeLabel.setFont(labelFont);
        ageLabel.setFont(labelFont);
        statusLabel.setFont(labelFont);
        petNameLabelAR.setFont(labelFont);
        adoptorNameAR.setFont(labelFont);
        contactInfoLabelAR.setFont(labelFont);
        adoptionDateLabelAR.setFont(labelFont);
        notesLabelAR.setFont(labelFont);

        // Text Fields
        javax.swing.border.Border textBorder = javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createLineBorder(new java.awt.Color(210, 210, 210)),
            javax.swing.BorderFactory.createEmptyBorder(5, 7, 5, 7)
        );
        java.awt.Font fieldFont = new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14);
        javax.swing.JTextField[] textFields = {adopterNameTextFieldAR, contactInfoTextFieldAR, adoptionDateTextFieldAR, 
                                             petNameTextField, typeTextField, ageTextField, notesTextFieldAR};
        for (javax.swing.JTextField field : textFields) {
            field.setFont(fieldFont);
            field.setBorder(textBorder);
            field.setBackground(java.awt.Color.WHITE);
            field.setForeground(java.awt.Color.DARK_GRAY);
        }

        // Combo Boxes
        javax.swing.JComboBox[] comboBoxes = {statusComboBox, petNameComboBoxAR};
        for (javax.swing.JComboBox box : comboBoxes) {
            box.setFont(fieldFont);
            box.setBorder(textBorder);
            box.setBackground(java.awt.Color.WHITE);
            box.setForeground(java.awt.Color.DARK_GRAY);
        }

        // Text Area (About/Help)
        jTextArea1.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
        jTextArea1.setBackground(java.awt.Color.WHITE);
        jTextArea1.setForeground(java.awt.Color.DARK_GRAY);
    }
    
    private DefaultTableModel petTableModel;
    private DefaultTableModel adoptionTableModel;

    private void initTableModels() {
        petTableModel = new DefaultTableModel(new Object[]{"Name", "Type", "Age", "Status"}, 0);
        jTable1.setModel(petTableModel);

        adoptionTableModel = new DefaultTableModel(new Object[]{"Adopter", "Contact", "Date", "Pet", "Notes"}, 0);
        jTable2.setModel(adoptionTableModel);
    }


    
    private void initDropdowns() {
        // Status dropdown
        statusComboBox.removeAllItems();
        statusComboBox.addItem("Available");
        statusComboBox.addItem("Pending");
        statusComboBox.addItem("Adopted");
        statusComboBox.setSelectedItem("Available");

        // Adoption pet dropdown is filled dynamically
        populatePetDropdown();
    }

    private void attachTableListeners() {
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = jTable1.getSelectedRow();
                if (row >= 0) {
                    Pet pet = petList.get(row);
                    petNameTextField.setText(pet.getName());
                    typeTextField.setText(pet.getType());
                    ageTextField.setText(String.valueOf(pet.getAge()));
                    statusComboBox.setSelectedItem(pet.getStatus());
                }
            }
        });
    }
    
    
    private void setHelpText() {
        String helpText = """
    PET ADOPTION MANAGEMENT SYSTEM
    Version: 1.0
    Developer: RM Villa

    About
    This system allows users to manage pets and record adoptions efficiently.

    You can:
    • Add, edit, or delete pets and set their availability status.
    • Record adoptions that automatically update pet status to "Adopted".
    • View adoption history with adopter details and notes.

    How to Use
    1. Manage Pets Tab
       - Add new pets with name, type, and age.
       - Edit or delete pet entries.
       - Only pets with status "Available" can be adopted.

    2. Adoption Records Tab
       - Record adoptions for available pets.
       - Adopted pets will no longer appear in the dropdown.

    3. About / Help Tab
       - Displays usage instructions and credits.

    Tips
    • Use clear pet names and consistent types (Dog, Cat, etc.).
    • Double-check adopter info before saving a record.
    • You can edit or delete adoption records anytime.

    Support
    For bugs or suggestions, contact: support@petadopt.com
    """;

        jTextArea1.setText(helpText);
    }



    private int getSelectedRowIndex() {
        int row = jTable1.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row first!");
        }
        return row;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PetAdoptationSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PetAdoptationSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PetAdoptationSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PetAdoptationSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PetAdoptationSystem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addRecordButtonAR;
    private javax.swing.JTextField adopterNameTextFieldAR;
    private javax.swing.JLabel adoptionDateLabelAR;
    private javax.swing.JTextField adoptionDateTextFieldAR;
    private javax.swing.JScrollPane adoptionRecordsTable;
    private javax.swing.JLabel adoptorNameAR;
    private javax.swing.JLabel ageLabel;
    private javax.swing.JTextField ageTextField;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton clearFieldsButtonAR;
    private javax.swing.JLabel contactInfoLabelAR;
    private javax.swing.JTextField contactInfoTextFieldAR;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deleteRecordButtonAR;
    private javax.swing.JButton editButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JScrollPane managePetsTable;
    private javax.swing.JLabel notesLabelAR;
    private javax.swing.JTextField notesTextFieldAR;
    private javax.swing.JComboBox<String> petNameComboBoxAR;
    private javax.swing.JLabel petNameLabel;
    private javax.swing.JLabel petNameLabelAR;
    private javax.swing.JTextField petNameTextField;
    private javax.swing.JComboBox<String> statusComboBox;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JTextField typeTextField;
    // End of variables declaration//GEN-END:variables
}
